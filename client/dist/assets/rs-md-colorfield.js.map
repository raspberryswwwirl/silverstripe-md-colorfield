{"version":3,"file":"rs-md-colorfield.js","sources":["../../plugin-vue:export-helper","../../src/components/MDText.vue","../../src/classes/swatch.js","../../src/components/MaterialColorPicker.ce.vue","../../src/md-colorfield.js"],"sourcesContent":["\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","<template>\n    <component :is=\"tag\" :wrap=\"wrap\" :gutters=\"gutters\" :scale=\"scale\"><slot>{{ label }}</slot></component>\n</template>\n\n<script>\nexport default {\n    name: \"MDText\",\n    props: {\n        label: {\n            type: String,\n            default() {\n                return 'Untitled';\n            }            \n        },\n        wrap: {\n            type: Boolean,\n            default() {\n                return true;\n            }\n        },\n        gutters: {\n            type: Number,\n            default() {\n                return 0;\n            }\n        },\n        scale: {\n            type: String,\n            default() {\n                return 'Body1'\n            }\n        },\n        tag: {\n            type: String,\n            default() {\n                return 'mdtext'\n            }\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles/material/mdtext.scss';\n</style>\n","import tinycolor from 'tinycolor2'\n\nexport default class Swatch {\n    constructor(props) {\n        this.__key = 'key' in props ? props.key : null\n        this.__value = 'value' in props ? this.validate( props.value ) : null\n        this.__color = {\n            light: tinycolor('#eef0f4'),\n            dark: tinycolor('#303b4d'),\n        }\n        this.__id = `Swatch-${this.__key}-${this.__value.toHex()}`\n    }\n\n    get key() {\n        return this.__key\n    }\n\n    set key( value ) {\n        this.__key = value\n    }\n\n    get value() {\n        return this.__value\n    }\n\n    set value( value ) {\n        this.__value = value\n    }\n\n    validate( value ) {\n        let c = tinycolor(value)\n        return c.isValid() ? c : false\n    }\n\n    accessibility() {\n        let backgroundColor = this.__value.isDark() ? this.__color.light : this.__color.dark\n        let foregroundColor = this.__value\n        let score           = tinycolor.isReadable(foregroundColor,backgroundColor)\n        return !score ? 'poor' : null\n    }\n\n    isBaseColor() {\n        return this.__key == '500'\n    }\n\n    toID() {\n        return this.__id\n    }\n\n    toString() {\n        return !!this.__value ? this.__value.toHexString() : null\n    }\n\n    toStyle() {\n        return {\n            backgroundColor:  this.toString(),\n            color: this.__value.isDark() ? this.__color.light.toHexString() : this.__color.dark.toHexString()\n        }\n    }\n}\n","<template>\n    <md-sheet :id=\"id\" :title=\"title\" class=\"md-sheet\">\n        <md-sheetbody>\n            <md-sheettitle><MDText :label=\"title\" scale=\"body2\" tag=\"span\" /></md-sheettitle>\n            <input type=\"color\" class=\"md-colorpicker\" v-model=\"value\">\n            <template v-if=\"colorValues\">\n                <md-colorlist>\n                    <label :for=\"swatch.toID()\" class=\"md-swatch\" v-for=\"(swatch, index) in colorValues\" :key=\"index\" :style=\"swatch.toStyle()\" :contrast=\"swatch.accessibility()\" :base=\"swatch.isBaseColor()\"  :disabled=\"disabled(swatch.toString())\">\n                        <input type=\"checkbox\" :id=\"swatch.toID()\" :value=\"swatch.toString()\" v-model=\"selectedValues\" :disabled=\"disabled(swatch.toString())\">\n                        <md-swatchlabel><md-swatchkey>{{swatch.key}}</md-swatchkey><md-swatchvalue>{{swatch.toString()}}</md-swatchvalue></md-swatchlabel>\n                    </label>\n                </md-colorlist>\n            </template>\n        </md-sheetbody>\n    </md-sheet>\n</template>\n\n<script>\nimport { computed, ref, reactive, onBeforeMount, onMounted, onBeforeUpdate, onUpdated } from 'vue'\nimport MDText from '@/components/MDText.vue'\nimport Swatch from '@/classes/swatch'\nimport tinycolor from 'tinycolor2'\n\nexport default {\n    name: \"MaterialColorPicker\",\n    components: {MDText},\n    props: {\n        id: {\n            type: String,\n            default() {\n                return null\n            }\n        },\n        title: {\n            type: String,\n            default() {\n                return 'Untitled'\n            }\n        },\n        value: {\n            type: String,\n            default() {\n                return null\n            }\n        },\n        selections: {\n            type: String,\n            default() {\n                return null\n            }\n        },\n        selectionsfield: {\n            type: String,\n            default() {\n                return null\n            }\n        },\n        field: {\n            type: String,\n            default() {\n                return null\n            }\n        }\n    },\n\n    setup(props, {emit}) {\n        const maxSelections         = 3\n        const selectedValues        = ref([])\n        const colorValues           = ref([])\n        const targetField           = ref(null)\n        const targetSelectionsField = ref(null)\n\n        const fieldName = computed(() => {\n            return props.field ?? null\n        })\n\n        const value = computed({\n            get: () => {\n                \n                return props.value\n            },\n            set: ( value ) => {\n                props.value = value // example write directly to property\n                selectedValues.value = [] // Reset selections\n                // if( !targetField.value ) {\n                //     targetField.value = document.querySelector(`#${fieldName.value}`)\n                // }\n\n                targetField.value.value = value\n                targetField.value.classList.add('dirty') // Mark the field as changed\n\n                calculateColors()\n\n                emit( 'update:value', value )\n            }\n        })\n\n        const disabled = ( value ) => {\n            return (selectedValues.value.length >= maxSelections && selectedValues.value.indexOf(value) == -1) ? true : null\n        }\n\n        // Component methods\n        const multiply = (rgb1, rgb2) => {\n            rgb1.b = Math.floor(rgb1.b * rgb2.b / 255)\n            rgb1.g = Math.floor(rgb1.g * rgb2.g / 255)\n            rgb1.r = Math.floor(rgb1.r * rgb2.r / 255)\n            return tinycolor('rgb ' + rgb1.r + ' ' + rgb1.g + ' ' + rgb1.b)\n        }\n\n        const calculateColors = () => {\n            if ( !props.value || !targetField.value ) return false\n\n            // Prioritize the saved colour value as the base color to\n            // deal with SilverStripe's field state/value not changing\n            // after a save, which requires a re-save to reload the field\n            let hex         = (targetField.value?.value != props.value ) ? targetField.value?.value ?? props.value : props.value\n            \n            let baseLight   = tinycolor('#ffffff')\n            let baseDark    = multiply(tinycolor(hex).toRgb(), tinycolor(hex).toRgb())\n            let baseTriad   = tinycolor(hex).tetrad()\n            let swatches    = [\n                new Swatch({key:'50', value: tinycolor.mix(baseLight, hex, 12)}),\n                new Swatch({key:'100', value: tinycolor.mix(baseLight, hex, 30)}),\n                new Swatch({key:'200', value: tinycolor.mix(baseLight, hex, 50)}),\n                new Swatch({key:'300', value: tinycolor.mix(baseLight, hex, 70)}),\n                new Swatch({key:'400', value: tinycolor.mix(baseLight, hex, 85)}),\n                new Swatch({key:'500', value: tinycolor.mix(baseLight, hex, 100)}),\n                new Swatch({key:'600', value: tinycolor.mix(baseDark, hex, 87)}),\n                new Swatch({key:'700', value: tinycolor.mix(baseDark, hex, 70)}),\n                new Swatch({key:'800', value: tinycolor.mix(baseDark, hex, 54)}),\n                new Swatch({key:'900', value: tinycolor.mix(baseDark, hex, 25)}),\n                new Swatch({key:'A100', value: tinycolor.mix(baseDark, baseTriad[4], 15).saturate(80).lighten(65)}),\n                new Swatch({key:'A200', value: tinycolor.mix(baseDark, baseTriad[4], 15).saturate(80).lighten(55)}),\n                new Swatch({key:'A400', value: tinycolor.mix(baseDark, baseTriad[4], 15).saturate(100).lighten(45)}),\n                new Swatch({key:'A700', value: tinycolor.mix(baseDark, baseTriad[4], 15).saturate(100).lighten(40)})\n            ];\n\n            return colorValues.value = swatches\n        }\n\n        const serialize = () => {\n            return targetSelectionsField.value.value = !!selectedValues.value ? JSON.stringify([\n                ...selectedValues.value\n            ]) : ''\n        }\n\n        const getColorByKey = ( key ) => {\n            return colorValues.value.filter( item => item.key == key )\n        }\n\n        const init = () => {\n            // Capture the SS field that will hold the output\n            targetField.value = !targetField.value ? document.querySelector(`#${fieldName.value}`) : targetField.value\n\n            // Capture the SS field that will hold the selections\n            targetSelectionsField.value = !targetSelectionsField.value ? document.querySelector(`#${props.selectionsfield}`) : targetSelectionsField.value\n\n            calculateColors()\n            let baseColor = getColorByKey('50')\n\n            // Only load selections if the base color of the calculated colors contain\n            // the same value as the saved/initial color, otherwise clear the\n            // selections and start the selection process over again\n            if( !!baseColor && !baseColor.toString() == targetField.value?.value ) {\n                selectedValues.value = JSON.parse( props.selections )\n            }else{\n                selectedValues.value = []\n                value.value = (targetField.value?.value != props.value ) ? targetField.value?.value ?? props.value : props.value\n            }\n\n            // Do the same for selections\n            if( targetSelectionsField.value?.value ) {\n                selectedValues.value = JSON.parse( targetSelectionsField.value.value )\n            }\n        }\n\n        // lifecycle hooks\n        onBeforeMount( () => {\n        })\n\n        onMounted( () => {\n            init();\n        })\n\n        onBeforeUpdate( () => {\n        })\n\n        onUpdated( () => {\n            serialize()\n        })\n\n        return {\n            fieldName,\n            targetField,\n            selectedValues,\n            colorValues,\n            disabled,\n            value\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/styles/material/mdcolorlist.scss\";\n</style>\n","import { defineCustomElement } from 'vue'\nimport MaterialColorPicker from '@/components/MaterialColorPicker.ce.vue'\nimport Utils from '@/lib/utils'\nimport '@/styles/md-colorfield.scss';\n\n/**\n * @link https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\n */\n\nexport function register() {\n    const MaterialColorPickerElement = defineCustomElement(MaterialColorPicker)\n    customElements.define('md-vue-colorpicker',MaterialColorPickerElement)\n}\n\nregister();\n"],"names":["_openBlock"],"mappings":"kNACA,MAAe,CAAC,EAAK,IAAU,CAC7B,KAAM,GAAS,EAAI,WAAa,EAChC,SAAW,CAAC,EAAK,IAAQ,GACvB,EAAO,GAAO,EAEhB,MAAO,ICDT,SACI,KAAM,SACN,MAAO,CACH,MAAO,CACH,KAAM,OACN,SAAU,CACN,MAAO,aAGf,KAAM,CACF,KAAM,QACN,SAAU,CACN,MAAO,KAGf,QAAS,CACL,KAAM,OACN,SAAU,CACN,MAAO,KAGf,MAAO,CACH,KAAM,OACN,SAAU,CACN,MAAO,UAGf,IAAK,CACD,KAAM,OACN,SAAU,CACN,MAAO,2CAlCSA,iBAAO,YAAmB,sEAAuB,4HCClE,OAAa,CACxB,YAAY,EAAO,CACf,KAAK,MAAQ,OAAS,GAAQ,EAAM,IAAM,KAC1C,KAAK,QAAU,SAAW,GAAQ,KAAK,SAAU,EAAM,OAAU,KACjE,KAAK,QAAU,CACX,MAAO,EAAU,WACjB,KAAM,EAAU,YAEpB,KAAK,KAAO,UAAU,KAAK,SAAS,KAAK,QAAQ,aAGjD,MAAM,CACN,MAAO,MAAK,SAGZ,KAAK,EAAQ,CACb,KAAK,MAAQ,KAGb,QAAQ,CACR,MAAO,MAAK,WAGZ,OAAO,EAAQ,CACf,KAAK,QAAU,EAGnB,SAAU,EAAQ,CACd,GAAI,GAAI,EAAU,GAClB,MAAO,GAAE,UAAY,EAAI,GAG7B,eAAgB,CACZ,GAAI,GAAkB,KAAK,QAAQ,SAAW,KAAK,QAAQ,MAAQ,KAAK,QAAQ,KAC5E,EAAkB,KAAK,QAE3B,MAAO,AADe,GAAU,WAAW,EAAgB,GAClC,KAAT,OAGpB,aAAc,CACV,MAAO,MAAK,OAAS,MAGzB,MAAO,CACH,MAAO,MAAK,KAGhB,UAAW,CACP,MAAO,AAAE,MAAK,QAAU,KAAK,QAAQ,cAAgB,KAGzD,SAAU,CACN,MAAO,CACH,gBAAkB,KAAK,WACvB,MAAO,KAAK,QAAQ,SAAW,KAAK,QAAQ,MAAM,cAAgB,KAAK,QAAQ,KAAK;ECjChG,UACI,KAAM,sBACN,WAAY,CAAC,UACb,MAAO,CACH,GAAI,CACA,KAAM,OACN,SAAU,CACN,MAAO,QAGf,MAAO,CACH,KAAM,OACN,SAAU,CACN,MAAO,aAGf,MAAO,CACH,KAAM,OACN,SAAU,CACN,MAAO,QAGf,WAAY,CACR,KAAM,OACN,SAAU,CACN,MAAO,QAGf,gBAAiB,CACb,KAAM,OACN,SAAU,CACN,MAAO,QAGf,MAAO,CACH,KAAM,OACN,SAAU,CACN,MAAO,SAKnB,MAAM,EAAO,CAAC,QAAO,CAEjB,KAAM,GAAwB,EAAI,IAC5B,EAAwB,EAAI,IAC5B,EAAwB,EAAI,MAC5B,EAAwB,EAAI,MAE5B,EAAY,EAAS,IAAM,OAC7B,MAAO,KAAM,QAAN,OAAe,OAGpB,EAAQ,EAAS,CACnB,IAAK,IAEM,EAAM,MAEjB,IAAK,AAAE,GAAW,CACd,EAAM,MAAQ,EACd,EAAe,MAAQ,GAKvB,EAAY,MAAM,MAAQ,EAC1B,EAAY,MAAM,UAAU,IAAI,SAEhC,IAEA,EAAM,eAAgB,MAIxB,EAAW,AAAE,GACP,EAAe,MAAM,QAAU,GAAiB,EAAe,MAAM,QAAQ,IAAU,GAAM,GAAO,KAI1G,EAAW,CAAC,EAAM,IACpB,GAAK,EAAI,KAAK,MAAM,EAAK,EAAI,EAAK,EAAI,KACtC,EAAK,EAAI,KAAK,MAAM,EAAK,EAAI,EAAK,EAAI,KACtC,EAAK,EAAI,KAAK,MAAM,EAAK,EAAI,EAAK,EAAI,KAC/B,EAAU,OAAS,EAAK,EAAI,IAAM,EAAK,EAAI,IAAM,EAAK,IAG3D,EAAkB,IAAM,WAC1B,GAAK,CAAC,EAAM,OAAS,CAAC,EAAY,MAAQ,MAAO,GAKjD,GAAI,GAAe,MAAY,QAAZ,cAAmB,QAAS,EAAM,OAAU,QAAY,QAAZ,cAAmB,QAAnB,OAA0C,EAAM,MAE3G,EAAc,EAAU,WACxB,EAAc,EAAS,EAAU,GAAK,QAAS,EAAU,GAAK,SAC9D,EAAc,EAAU,GAAK,SAC7B,EAAc,CACd,GAAI,GAAO,CAAC,IAAI,KAAM,MAAO,EAAU,IAAI,EAAW,EAAK,MAC3D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAW,EAAK,MAC5D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAW,EAAK,MAC5D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAW,EAAK,MAC5D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAW,EAAK,MAC5D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAW,EAAK,OAC5D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAU,EAAK,MAC3D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAU,EAAK,MAC3D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAU,EAAK,MAC3D,GAAI,GAAO,CAAC,IAAI,MAAO,MAAO,EAAU,IAAI,EAAU,EAAK,MAC3D,GAAI,GAAO,CAAC,IAAI,OAAQ,MAAO,EAAU,IAAI,EAAU,EAAU,GAAI,IAAI,SAAS,IAAI,QAAQ,MAC9F,GAAI,GAAO,CAAC,IAAI,OAAQ,MAAO,EAAU,IAAI,EAAU,EAAU,GAAI,IAAI,SAAS,IAAI,QAAQ,MAC9F,GAAI,GAAO,CAAC,IAAI,OAAQ,MAAO,EAAU,IAAI,EAAU,EAAU,GAAI,IAAI,SAAS,KAAK,QAAQ,MAC/F,GAAI,GAAO,CAAC,IAAI,OAAQ,MAAO,EAAU,IAAI,EAAU,EAAU,GAAI,IAAI,SAAS,KAAK,QAAQ,OAGnG,MAAO,GAAY,MAAQ,GAGzB,EAAY,IACP,EAAsB,MAAM,MAAQ,AAAE,EAAe,MAAQ,KAAK,UAAU,CAC/E,GAAG,EAAe,QACjB,GAGH,EAAgB,AAAE,GACb,EAAY,MAAM,OAAQ,GAAQ,EAAK,KAAO,GAGnD,EAAO,IAAM,eAEf,EAAY,MAAQ,AAAC,EAAY,MAAwD,EAAY,MAA5D,SAAS,cAAc,IAAI,EAAU,SAG9E,EAAsB,MAAQ,AAAC,EAAsB,MAA8D,EAAsB,MAA5E,SAAS,cAAc,IAAI,EAAM,mBAE9F,IACA,GAAI,GAAY,EAAc,MAK9B,AAAI,CAAC,CAAC,GAAa,CAAC,EAAU,YAAc,MAAY,QAAZ,cAAmB,OAC3D,EAAe,MAAQ,KAAK,MAAO,EAAM,YAEzC,GAAe,MAAQ,GACvB,EAAM,MAAS,MAAY,QAAZ,cAAmB,QAAS,EAAM,OAAU,QAAY,QAAZ,cAAmB,QAAnB,OAA0C,EAAM,OAI3G,MAAsB,QAAtB,cAA6B,QAC7B,GAAe,MAAQ,KAAK,MAAO,EAAsB,MAAM,SAKvE,SAAe,IAAM,IAGrB,EAAW,IAAM,CACb,MAGJ,EAAgB,IAAM,IAGtB,EAAW,IAAM,CACb,MAGG,CACH,YACA,cACA,iBACA,cACA,WACA,0RApMY,QAAc,MAAM,iGAEM,MAAM,EAAO,MAAC,iEAChC,oNAGgB,IAAK,SAAqD,kBAAa,IAAK,EAAqB,UAA8B,WAAK,2BAA8B,sEAClK,gBAAoB,+BAAoD,oYCCjH,aAAoB,CACvB,KAAM,GAA6B,EAAoB,IACvD,eAAe,OAAO,qBAAqB,GAG/C"}